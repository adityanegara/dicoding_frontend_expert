A) Karakteristik Progresive Web Apps(PWA)

    A.1) Progresif
        : Bekerja untuk setiap pengguna. Tak peduli apapun browsernya, tidak masalah.
        PWA dibangun dengan peningkatan progresif sebagai intinya.

    A.2) Responsif
        : Mampu menyesuaikan dengan berbagai perangkat. Baik itu desktop, seluler, tablet, 
        atau yang lainnya.

    A.3) Konektivitas Independen
        : Service worker membantu mengikatkan proses load time ketika internet
        memiliki kualitas rendah, bahkan dapat diakses dalam keadaan offline.

    A.4) Seperti Aplikasi Native
        : Experience yang diberikan tak kalah dengan aplikasi native karena PWA dibangun dengan 
        struktur application shell.
    
    A.5) Aman
        : PWA mewajibkan web untuk berjalan pada HTTPS. ini tentu membuat web aman dari berbagai 
        ancaman

    A.6) Dapat Ditemukan
        : Terdefinisi sebagai "Aplikasi" berkat Web App Manifest dan service worker. 
        Dan dapat mudah ditemukan oleh search engine seperti Google.

    A.7) Re-engagable 
        : Dengan fitur pemberitahuan seperti push notification, dapat mengajak kembali
        pengguna untuk menggunakan aplikasi

    A.8) Dapat dipasang
        : Memungkinkan pengguna untuk memasang di layar beranda tanpa melalui application store

    A.9) Dapat ditautkan
        : Dapat dengan mudah dibagukan melalui URL.

B) Kelebihan PWA

    B.1) Tidak membutuhkan toko aplikasi
        : Karena PWA merupakan web, untuk menggunakannya cukup menggunakan browser saja

    B.2) Tidak perlu melakukan update
        : Cukup melakukan refresh layaknya web pada browser

    B.3) Mudah dipublikasi, diakses, dan dibagian
        : Cukup kirimkan tautan atau URL aplikasi dan pengguna lainnya bisa mengakses dengan cepat.

    B.4) Bisa memanfaatkan fitur native
        : notifikasi, lokasi, orientasi, gesture
    
    B.5) Mengurangi Penggunaan dapat
        : Load time PWA dapat lebih cepat dibandingkan dengan aplikasi native.

C) Kekurangan PWA

    C.1) Belum semua fitur native dapat dimanfaatkan PWA
        : kontak, SMS, Telepon, bluetooth, dan notification

    C.2) Tidak didukung browser lama

D) Komponen Pembentuk PWA

    D.1) Application shell
        : Kerangka antarmuka aplikasi. Mereka disimpan lebih dahulu di dalam cache sehingga
          dapat tampil secara instan saat aplikasi dibuka. Umumnya komponen halaman yang menjadi
          bagian dari app shell adalam komponen yang selalu ada untuk semua halaman 
          seperti header, sidebar, dan footer. Adapun komponen dari konten halamanakan dimuat
          secara dinamis dan asinkron.
    
    D.2) Web App Manifest
        : file JSON yang mengontrol bagaimana aplikasi ditampilkan dan dijalankan di sisi
          pengguna. 

    D.3) Service worker
        : Script yang dijalankan oleh browser di latar belakang. dengan menggunakan
        service worker, kita dapat memanfaatkan resource yang tersimpan di dalam cache
        untuk menampilkan konten bahkan dalam mode jaringan offline.

    D.4) Cache API 
        : Tempat penyimpanan lokall yang digunakan browser untuk menyimpan resource agar
        dapat digunakan kembali. 

    D.5) Fetch API
        : melakukan request pada server.

    D.6) IndexedDB
        : sistem penyimpanan lokal berbasis NoSQL di browser.

    D.7) Web Socket
        : untuk real time communication
    
    D.8) Notifications
        : notifikasi popun yang muncul pada perangkat.

E) Web Architecture

    : Ada dua arsitektur yang digunakan dalam membangun sebuah web bila ditinjau dari
      bagaimana server mengembalikan konten halaman, yakni Server side rendering(SSR) dan
      Client Side Rendering (CSR). 

      SSR : Pola dimana setiap halaman di render pada sisi server dan dikembalikan ke browser
            dalam bentuk HTML yang siap ditampilkan.

      CSR : Pola dimana server hanya mengembalikan data(biasanya dalam bentuk format JSON atau XML) 
            untuk olah dan di render pada sisi client (browser) oleh javascript

     Ada dua pola arsitektur web yang ditinjau dari bagaimana sebuah konten dimuat yaitu
     Single page app, dan multi-page app.

      MPA : saat website terdiri dari beberapa halaman HTML. seperti
            domain.com/home.HTML
            domain.com/profile.HTML
            domain.com/timeline.HTML
     
      SPA : website hanya menggunakan satu berkas HTML
            domain.com/#/home -> Halaman Home
            domain.com/#/profile -> Halaman Profil
            domain.com/#/timeline -> Halaman Timeline
            
F) Application shell

    : Salah satu teknik dalam PWA untuk membuat komponen UI termuat secara instan tanpa menunggu
      response dari server. App shell sejatinya hanya terdiri dari HTML, CSS, dan javascript
      yang disimpan dalam cache pada request pertama agar request selanjutnya tidak
      perlu mengambil dari server lagi.

G) Siklus Hidup Service Worker
   
    G.1) Installation
    :Karena Service Worker terpisah dari DOM, untuk menambahkan event kita bisa
    gunakan self, bukan window ataupun document. Umumnya pada proses ini
    kita melakukan penyimpanan resource App Shell pada Caches API.

    G.2) Activate
    : Setelah instalasi service worker berhasil, siklus hidup selanjutnya ialah
    proses aktivassi. Pada proses ini kita bisa manfaatkan untuk mengelola cache lama.
    Contohnya kita bisa menghapus cache lama bila terdapat penambahan app shell
    atau perubahan versi aplikasi. Hal ini penting, karena bila tidak dilakukan
    cache lama akan menumpuk dan membebani storage browser.

    Sebelum proses aktivasi selesai, Service worker belum dapat mengontrol browser,
    dalam arti ia belum bisa menjalankan tugasnya. Namum perlu diingat untuk proses
    aktivasi Service Worker baru, tak akan langsung dieksekusi bila terdapat service worker
    lama sedang aktif mengontrol browser.  Service worker lama akan berhenti mengontrol
    ketika tab atau browser web ditutup.

    G.3) Idle
    : Setelah service worker berhasil dipasang dan diaktifkan, maka status Service Worker
    akan mengalami idle atau bisa kita sebut bersiap. bersiap untuk melakukan tugas utama
    yaitu mengontrol event fetch, message, atau push yang terjadi pada browser. 

H) Event Pada Service Worker

    H.1) Event Fetch
    : Event fetch akan terpanggil setiap kali sebuah permintaan(request) dilakukan oleh client. 
     Kita dapat mengecek apakah request yang dilakukan sudah terdapat pada Cache API 
     atau belum.

    H.2) Event message
    : Event ini terjadi saat client yang memanggil method postMessage() pada Service Worker
    yang sedang aktif. Event ini dapat kita manfaatkan untuk menerima informasi
    dari client ke Service Worker

    H.3) Event Sync
    : Kita dapat memantau event sync sesuai dengan background sync yang telah kita daftarkan
    di bagian awal proses registrasi service worker. Background sync adalah
    web API yang dapat kita gunakan untuk menunda sebuah aksi sampai perangkat 
    terhubung dengan stabil ke jaringan internet. 

    H.4) Event push
    : Event push diinisiasi oleh backend server dan melewati push service yang ada di browser.
    Service worker dapat memantau setiap event push yang datang ke browser.

I) Cache API
    
    : Tempat penyimpanan lokal yang digunakan browser untuk
    menyimpan resource agar dapat digunakan kembali sehingga
    pada pemanggilan selanjutnya tak perlu mengirim permintaan
    (request) lagi ke jaringan.

    H.1)Mengecek Apakah Browser mendukung cache API

    : const cacheAvailable = 'cache' in self; 

    H.2) Membuat dan Membuka Cache

    : Untuk membuat dan membuka cache, menggunakan
    caches.open(name). Jika cache dengan nama yang ditetapkan
    belum ada ia akan otomatis terbuat. Method open() 
    akan mengembalikan promise yang membawa objek cache pada
    resolves

    caches.open('my-cache')
    .then((cache)=>{

    });

    H.3) Menambahkan Resource Ke Cache

        H.3.1) Cache.add
        
        : cache.add() membutuhkan satu parameter
        bisa sebuah request, atau URL. method ini 
        membuat request dikirimkan ke server dan menyimpan
        response ke cache. Jika request gagal, atau response 
        menghasilkan kode 200, maka tidak ada data yang disimpan
        pada cache

        cache.add(new Request('/data.json'));
        cache.add('data.json');

        H.3.2) Cache.addAll
        
        : Sama seperti add, namun ia dapat memasukkan banyak request
        atau URL String sekaligus. Jika salah satu request gagal, 
        maka tak ada satupun resource yang disimpan. Dan promise
        yang dikembalikan oleh method ini berstatus rejected

        const urls = [/weather/today.json', '/weather/tomorrow.json'];
        cache.addAll(urls);
    
    H.4) Mengambil Resource dari cache

        : Untuk mencari dan mengambil resource dari cache, kita
        gunakan method match

        cache.match(request)
        .then((response)=>{

        });

        Pada method ini, kita dapat menerapkan options di parameter
        kedua. Options digunakan bila kita ingin pencarian cache 
        terhadap request tidak memperdulikan beberapa query,
        parameter, atau attribution lainnya.

        const options = {
            ignoreSearch : true,
            ignoreMethod : true,
            ignoreVary : true,
        };

        cache.match(request, options)
        .then((response)=>{

        });

    H.5) Mencari Cache

    : Untuk menampilkan seluruh nama atau keys yang tersedia
    pada cache, kita dapat menggunakan method keys.

    caches.keys()
    .then((cacheNames)=>{
        cacheNames.forEach((cacheName) =>{
            if(cacheNames !== 'my-cache'){

            }
        })
    })

    H.6) Menghapus Cache

    : Untuk menghapus cache, ita dapat menggunakan method
    caches.delete(). Method tersebut membutuhkan satu parameter
    yakni nama dari cache yang akan dihapus. Biasanya ketika menghapus
    cache kita kombinasikan dengan penggunaan keys.

    cache.keys()
        .then((cacheNames) =>{
            cacheNames.forEach((cacheName) =>{
                if(cacheNames !== 'my-cache'){
                    caches.delete(cacheName)
                }
            })
        })

    H.7) Caching Strategies

        H.7.1) Pola Cache Only

        : Pola cache only merupakan pola caching dimana aplikasi
        hanya mengembalikan aset yang ada di dalam cache, 
        tanpa mengirim request ke jaringan. Cache only 
        cocok digunakan pada aset statis yang jarang berubah
        seperti aset untuk app shell.

        self.addEventListener('fetch', (event) => {
            event.respondWith(caches.match(event.request));
        });

        1.) precaching, menyimpan aset ke dalam cache pada saat
        instalasi service worker. 

        2) halaman melakukan request dan diintercept service worker

        3) service worker mencari cache yang sesuai

        4) cache mengembalikan ke halaman.

        H.7.2) Network Only

        : hanya mengirimkan permintaan ke internet
        tanpa menggunakan penyimpanan cache. Strategi 
        ini cocok diterapkan pada data yang selalu berubah
        dan pengguna harus selalu mendapatkan data terbaru.

        self.addEventListener('fetch', (event)=>{
            event.respondWith(fetch(even.request));
        });

        H.7.2) Cache First(Cache Fallback to network)

        : Request akan diambil dari cache dulu, namun bila request
        tidak ditemukan pada cache, ia akan mengambil resource dari 
        internet.

        self.addEventListener('fetch', (event)=>{
            event.respondWith(
                caches.match(event.request).then((response) =>{
                    return response || fetch(even.request);
                })
            )
        });

        H.7.2) Network First

        : Selalu mengirim request ke internet, bila request berhasil
        response akan dimasukan ke dalam cache. Namun bila request
        gagal ia langsung dialihkan menggunakan cache.

        self.addEventListener('fetch', (event)=>{
            event.respondWith(
                fetch(even.request)
                .catch(()=>{
                    return caches.match(event.request)
                })
            )
        })

        H.7.3) Stale While Revalidate

        : Pada strategi Stale while revalidate kita 
        mengembalikan dulu data dari cache bila ada, 
        sambil mengirim juga permintaan ke jaringan untuk memperbaharui 
        data di dalam cache. Sehingga untuk permintaan selanjutnya,
        data yang diambil dari cache adalah data yang terbaru

        self.addEventListener('fetch', (event)=>{
            event.respondWith(revalidateCache(event.request));
        });

        const revalidateCache = async(request) =>{
            const response = await caches.match(request);
            if(response){
                _fetchRequest(request);
                return response;
            }
            return _fetchRequest(request);
        };

        const _fetchRequest = async (request) => {
            const response = await fetch(request);
            
            if (!response || response.status !== 200) {
                return response;
            }
            _addToCache(request);
            return response;
        };

        const _addToCache = async (request) => {
            const cache = await caches.open(CACHE_NAME);
            cache.add(request);
        };

I) IndexedDB
    
    : IndexedDB adalah database yang terdapat di web browser.
    Karena tersedia secara lokal, untuk mengaksesnya kita tidak
    membutuhkan koneksi internet.

    Database ini berbasis NoSQL, artinya kita tidak perlu 
    melakukan SQL query setiap kali melakukan transaksi data.
    Data yang disimpan di dalam indexedDB berupa javascript object.

    indexedDB tersedia pada browser secara unik berdasarkan domain. 
    Maksudnya, sebuah domain memiliki databasenya sendiri, dan tidak bisa 
    mengakses database yang berada pada situs lain.

    I.1) Istilah dalam IndexedDB

        I.1.1) Database
        : Database merupakan tempat tertinggi dalam penyimpanan data.
        Di dalam database kita dapat membuat banyak object store. 
        Kita pun dapat membuat banyak database, namun umumnya satu aplikasi
        cukup membuat satu database saja.

        I.1.2) Object store
        : Tempat penyimpanan satu jenis kumpulan data. Kalau
        dalam SQL sama seperti table.

        I.1.3) Index
        : object store khusus yang dipakai untuk mengorganisir
        object store lain berdasarkan salah satu propertinya.
        
        I.1.4) Operation
        : Istilah yang dipakai saat kita berurusan dengan database

        I.1.5) Transaction
        : Pembungkus sebuah operation atau sekelompok operation
        untuk menjaga integritas data. Jika ada operation yang gagald
        ditengah jalan, isi database akan dikembalikan seperti saat 
        sebelum transaction dilakukan. Semua operation di indexedDB 
        harus dibungkus oleh transaction agar tidak terjadi tumpang tindih
        dalam proses penulisan data di dalam database.

        I.1.6) Cursor
        : Objek yang bisa dimanfaatkan untuk melakukan iterasi
        pada kumpulan data di dalam database(membaca data satu persatu).`

    I.2) Dasar Pengunaan IndexedDB

        : Sejatinya indexedDB low level API yang butuh banyak konfigurasi
        dan penyesuaian sebelum menggunakannya. maka dari itu kita 
        menggunakan Jake Archibald(Google Engineer) idb(indexedDB, but 
        with promises)

        npm install idb

        menggunakannya
        
        import * as idb from 'idb';

    I.3) Membuat/Membuka Database dan Object store

        : import {openDB} from 'idb';
          const DATABASE_NAME = 'my-pwa-database';
          const dbPromise = openDB(DATABASE_NAME, 1, {
              upgrade(database){
                  //do something with database
              }
          })

          fungsi openDB membutuhkan 3 parameter yang pertama
          adalah nama database yang akan dibuka, versi databasenya,
          dan sebuah object yang terdiri dari callback, upgrade, blocked
          , dan blocking.

          Di dalam callback upgrade kita dapat memanfaatkan nilai database
          untuk membuat, menghapus object store ataupun index pada
          database.

          Untuk membuat object store baru, kita gunakan method
          database.createObjectStore()

          import {openDB} from 'idb';
          const DATABASE_NAME = 'my-pwa-database';
          const OBJECT_STORE_NAME = 'movie';

          const dbPromise = openDB(DATABASE_NAME,1,{
              upgrade(database){
                  database.createObjectStore(OBJECT_STORE_NAME, {keypath: 'id'});
              }
          })

          properti keypath mirip seperti primary key pada sql database.

    I.4) Operasi CRUD pada IndexedDB

        I.4.1) Get Data
        : const movie = (await dbPromise).get(OBJECT_STORE_NAME, id);
        
        method get() akan mengembalikan promise dengan satu objek yang
        berada pada database. Objek yang dipilih seusai nilai keypath(id)
        yang dimasukan pada parameternya.

        Bila kita ingin mendapatkan seluruh nilai maka
        
        const movies = (await dbPromise).getAll(OBJECT_STORE_NAME);

        I.4.2) Input Data
        :const movie = {
        id: 1,
        title: 'Spiderman',
        description: 'Lorem ipsum dolor sit amet',
        }; 
        (await dbPromise).add(OBJECT_STORE_NAME, movie);

        Jika pada object store kita menetapkan keyPath, maka objek yang
        dimasukan wajib memiliki properti dari keyPath tersebut, dan
        nilainya harus unik.

        I.4.3) Update Data
        : (await dbPromise).put(OBJECT_STORE_NAME, movie);

        I.4.4) Delete Data
        : (await dbPromise).delete(OBJECT_STORE_NAME, id);

J) WebSocket

    : Teknologi yang mengizinkan komunikasi client server
    berjalan dua arah secara aktif. Server tidak perlu
    menunggu permintaan dari client, serevr bisa langsung 
    mengirimkan data kapan saja. Begitu juga client. ia
    dapat mengirimkan data ke server tanpa server harus menanggapi
    balik apa data yang ia kirimkan. 

    Dengan pola komunikasi aktif secara dua arah(full-duplex)
    seperti ini client dan server perlu selalu terhubung agar
    menerima sinyal komunikasi dari tiap pihak.
    Karena selalu terhubung, kita dapat menciptakan komunikasi
    yang real time. 

    WebSocket cocok digunakan pada kasus real time chatting, live feed,
    multiplayer gaming, live progress.

    Untuk sisi server, agar websocket dapat berjalan pada HTTP, 
    diperlukan proses Handshake. 

    J.1) Membuka Koneksi WebSocket
    
    : Untuk memanfaatkan WebSocket pada browser, gunakan WebSocket API

    const webSocket = new WebSocket(url, protocols)

        J.1.1) Parameter URL
        : Properti url merupakan alamat URL WebSocket server 
        yang akan dikoneksikan. Nilai url harus menggunakan skema wss://
        atau ws:// bila client memperbolehkan komunikasi dilakukan
        pada jaringan yang tidak aman(insecure).

            J.1.1.1) Secure Connection
            : const webSocket =
             new WebSocket('wss://www.example.com/socketserver')

            J.1.1.2) Insecure Connection
            : const webSocket =
            new WebSocket('ws://www.example.com/socketserver');

        J.1.2) Parameter protocols
        : Parameter ini opsional. WebSocket dapat menyesuaikan interaksinya
        berdasarkan protokol yang diinginkan. Untuk menetapkan protokol yang
        diinginkan, kita manfaatkan parameter ini. Parameter ini kita dapat
        memberikan nilai string yang terdiri dari satu atau lebih nama protokol

            J.1.2.1) Single Protokol 
            :new 
              WebSocket('wss://www.example.com/socketserver', 'protocolOne');

            J.1.2.2) Multi Protokol
            :new 
            WebSocket('wss://www.example.com/socketserver', 
            ['protocolOne', 'protocolTwo']);
        
    J.2) Mengirim Data ke WebSocket Server

        J.2.1) Method Send 
        : const webSocket = 
        new WebSocket('wss://www.example.com/socketserver');

        webSocket.send('Some Text');

        J.2.2) Method onopen
        : Karena menghubungkan koneksi selalu berjalan asynchronous,
        untuk menghindari kegagalan dalam mengirimkan daa ke WebSocket
        server, lakukan pengiriman data setelah client berhasil 
        terhubung dengan WebSocket server. 

         const webSocket = 
        new WebSocket('wss://www.example.com/socketserver');

        webSocket.open = (event) =>{
            websSocket.send('Some text');
        }

        J.2.3) Mengirim JSON
        :  const webSocket = 
        new WebSocket('wss://www.example.com/socketserver');

        webSocket.open = (event) =>{
             const data = {
                type: 'message',
                text: document.querySelector('#text'),
                date: Date.now(),
            };
            websSocket.send(JSON.stringify(data));
        }

    J.3) Mendapatkan Data dari WebSocket Server
        
        J.3.1) method onmessage
        : const webSocket = 
        new WebSocket('wss://www.example.com/socketserver');

        webSocket.onmessage = (event) =>{
            console.log(event.data);
        }

        J.3.2) Bila server mengirimkan JSON
        : const webSocket = 
        new WebSocket('wss://www.example.com/socketserver');

        webSocket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log(data);
        };

    J.4) Menutup Koneksi WebSocket
    : webSocket.close();

        J.4.1) method bufferedAmount
        :Sebelum menutup koneksi alangkah baik selalu
        melakukan pengecekan untuk memastikan tidak ada data berjalan 
        yang sedang dikirim oleh server.

        const closeWebSocket = (webSocket) =>{
            if(!websocket.bufferedAmount){
                webSocket.close();
                return;
            }
            throw new Error('Pending Data is still available')
        }

        J.4.2) event close 
        : Kita juga bisa memanfaatkan event close bila 
        ingin menambahkan logika ketika koneksi WebSocket telah ditutup

        webSocket.onclose = (event) => {
            console.log('WebSocket connection was close');
        };

K) Notifikasi 

    : Notifikasi membantu untuk menarik ulang pengguna untuk mengunjungi kembali website kita. 
    Dengan adanya service worker dan Notification API, fitur notifikasi tak hanya dapat 
    dimanfaatkan oleh aplikasi native saja, namun juga untuk web. Pada materi kali ini
    kita akan belajar cara penggunaan Notification API mulai dari meminta izin, hingga menampilkan
    notifikasi dengan fungsi yang berbeda.
    
    K.1) Meminta Izin Menampilkan Notifikasi
        : Untuk meminta izin jalannya notifikasi pada web, gunakan method requestPermission()
        dari global object Notification.

        const requestPermission = async () =>{
               const result = await Notification.requestPermission();
               if(result === 'denied'){
                    console.log('Fitur Notification Tidak diijinkan');
                    return;
                }
                if(result === 'default'){
                    console.log('Pengguna Menutup kotak dialog permintaan ijin');
                    return;
                }        
                    console.log('Fitur notification diijinkan');
        }

        Karena notifikasi merupakan teknologi baru yang hadir pada versi Google Chrome 42
        ke atas, alangkah baiknya sebelum meminta izin, kita perlu mengecek apakah browser
        mendukung notifikasi atau Belum

        if('Notification' in window){
            requestPermission();
        }

    K.2) Menampilkan Notifikasi

        : Menampilkan notifikasi dapat dilakukan bila web kita sudah menerapkan Service Worker. 
        Karena untuk menampilkan notifikasi dilakukan melalui nilai registration dan Service
        Worker yang aktif, dan menggunakan method showNotification()

        navigator.serviceWorker.ready.then((registration) =>{
            registration.showNotification(title, options);
        });

        title : Judul dari notifikasi
        options : objek yang digunakan mengatur bagaimana tampilan dan perilaku notifikasinya

        navigator.serviceWorker.ready.then((registration) =>{
            const title = 'Judul Notifikasi';
            const options = { body: 'Ini merupakan konten dari notifikasi' };
            registration.showNotification(title, options);
        });

     



        

      

        
    