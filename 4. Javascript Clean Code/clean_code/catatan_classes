D) Classes
    D1) Gunakan ES6 Classes daripada ES5 Function
    Bad Practice
    : function Car(maxSpeed) {
        if (!(this instanceof Car)) {
        throw new Error('Instantiate Car with `new`');
        }
        
        this._maxSpeed = maxSpeed;
        }
        
        Car.prototype.move = function move() {};
        Car.prototype.getMaxSpeed = function getMaxSpeed() {
        return this._maxSpeed;
        };
        
        function SportCar(maxSpeed, nitro) {
        if (!(this instanceof SportCar)) {
        throw new Error('Instantiate SportCar with `new`');
        }
        Car.call(this, maxSpeed);
        this._nitro = nitro;
        }
        
        SportCar.prototype = Object.create(Car.prototype);
        SportCar.prototype.constructor = SportCar;
        SportCar.prototype.getMaxSpeed = function getMaxSpeed() {
        return this._maxSpeed + this._nitro;
        };
        SportCar.prototype.moveWithNitro = function moveWithNitro() {};
        
        function FreightCar(maxSpeed, totalLoad) {
        if (!(this instanceof FreightCar)) {
        throw new Error('Instantiate Car with `new`');
        }
        
        Car.call(this, maxSpeed);
        this._totalLoad = totalLoad;
        }
        
        FreightCar.prototype = Object.create(Car.prototype);
        FreightCar.prototype.constructor = FreightCar;
        FreightCar.prototype.getMaxSpeed = function getMaxSpeed() {
        return this._maxSpeed - this._totalLoad;
        };
        FreightCar.prototype.beep = function beep() {};

        Good Practice
        :  class Car {
            constructor(maxSpeed) {
            this._maxSpeed = maxSpeed;
            }
            
            get maxSpeed() {
            return this._maxSpeed;
            }
            
            move() { }
            }
            
            class SportCar extends Car {
            constructor(maxSpeed, nitro) {
            super(maxSpeed);
            this._nitro = nitro;
            }
            
            get maxSpeed() {
            return this._maxSpeed + this._nitro;
            }
            
            moveWithNitro() { }
            }
            
            class FreightCar extends Car {
            constructor(maxSpeed, totalLoad) {
            super(maxSpeed);
            this._totalLoad = totalLoad;
            }
            
            get maxSpeed() {
            return this._maxSpeed - totalLoad;
            }
            
            beep() { }
            }

    D2) Method Chaining
        Bad Practice
        : class Car {
            constructor() {
            this._color = null;
            this._manufacture = null;
            this._model = null;
            }
            
            
            setColor(color) {
            this._color = color;
            }
            
            
            setManufacture(manufacture) {
            this._manufacture = manufacture;
            }
            
            
            setModel(model) {
            this._model = model;
            }
            
            
            save() {
            console.log(this._color, this._manufacture, this._model);
            }
            }

            const car = new Car();
            car.setColor('White');
            car.setManufacture('Suzuki');
            car.setModel('Ignis');
            car.save();

            Good Practice
            class Car {
            constructor() {
            this._color = null;
            this._manufacture = null;
            this._model = null;
            }
            
            
            setColor(color) {
            this._color = color;
            return this;
            }
            
            
            setManufacture(manufacture) {
            this._manufacture = manufacture;
            return this;
            }
            
            
            setModel(model) {
            this._model = model;
            return this;
            }
            
            
            save() {
            console.log(this._color, this._manufacture, this._model);
            return this;
            }
            }
            
            
            const car = new Car()
            .setColor('White')
            .setManufacture('Suzuki')
            .setModel('Ignis')
            .save();